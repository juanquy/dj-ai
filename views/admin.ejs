<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <title>DJAI Admin - User Management</title>
  <link rel="stylesheet" href="/styles.css">
  <link rel="icon" href="/icon.svg" type="image/svg+xml">
  <style>
    /* Admin-specific styles */
    .admin-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 2rem;
    }
    
    .admin-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid var(--border-color);
    }
    
    .admin-nav {
      display: flex;
      gap: 1rem;
      margin-bottom: 2rem;
    }
    
    .admin-nav-item {
      padding: 0.75rem 1.25rem;
      background-color: var(--card-bg);
      border-radius: 4px;
      cursor: pointer;
      font-weight: bold;
    }
    
    .admin-nav-item.active {
      background-color: var(--primary-color);
      color: white;
    }
    
    .admin-panel {
      display: none;
    }
    
    .admin-panel.active {
      display: block;
    }
    
    .card {
      background-color: var(--card-bg);
      border-radius: 8px;
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      box-shadow: 0 2px 4px var(--container-shadow);
    }
    
    .stat-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 1.5rem;
    }
    
    .stat-card {
      text-align: center;
      padding: 1.5rem;
    }
    
    .stat-value {
      font-size: 2.5rem;
      font-weight: bold;
      color: var(--primary-color);
      margin-bottom: 0.5rem;
    }
    
    .stat-label {
      color: var(--secondary-text);
      font-size: 0.9rem;
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
    }
    
    table th, table td {
      padding: 0.75rem;
      text-align: left;
      border-bottom: 1px solid var(--border-color);
    }
    
    table th {
      background-color: var(--container-bg);
      font-weight: bold;
    }
    
    table tr:hover {
      background-color: var(--container-bg);
    }
    
    .user-actions {
      display: flex;
      gap: 0.5rem;
    }
    
    .user-actions button {
      padding: 0.25rem 0.5rem;
      font-size: 0.8rem;
    }
    
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 1000;
      justify-content: center;
      align-items: center;
    }
    
    .modal.active {
      display: flex;
    }
    
    .modal-content {
      background-color: var(--container-bg);
      border-radius: 8px;
      padding: 2rem;
      width: 90%;
      max-width: 500px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }
    
    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
      padding-bottom: 0.75rem;
      border-bottom: 1px solid var(--border-color);
    }
    
    .modal-close {
      cursor: pointer;
      font-size: 1.5rem;
      line-height: 1;
    }
    
    .modal-body {
      margin-bottom: 1.5rem;
    }
    
    .modal-footer {
      display: flex;
      justify-content: flex-end;
      gap: 1rem;
    }
    
    /* User edit form */
    .user-form {
      display: grid;
      gap: 1rem;
    }
    
    .form-row {
      display: grid;
      grid-template-columns: 1fr 2fr;
      align-items: center;
      gap: 1rem;
    }
    
    .form-row label {
      font-weight: bold;
    }
    
    .checkbox-row {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .checkbox-row input[type="checkbox"] {
      width: auto;
    }
    
    /* Responsive */
    @media (max-width: 768px) {
      .admin-nav {
        flex-direction: column;
        gap: 0.5rem;
      }
      
      .stat-grid {
        grid-template-columns: 1fr;
      }
      
      .form-row {
        grid-template-columns: 1fr;
      }
      
      .user-actions {
        flex-direction: column;
      }
    }
  </style>
</head>
<body>
  <div class="admin-container">
    <div class="admin-header">
      <h1>DJAI Admin Dashboard</h1>
      <div class="user-info">
        <span><%= userName %></span>
        <a href="/" class="button">Return to App</a>
      </div>
    </div>
    
    <div class="admin-nav">
      <div class="admin-nav-item active" data-panel="dashboard">Dashboard</div>
      <div class="admin-nav-item" data-panel="users">Users</div>
    </div>
    
    <!-- Dashboard Panel -->
    <div class="admin-panel active" id="dashboard">
      <h2>System Overview</h2>
      <div class="stat-grid">
        <div class="card stat-card">
          <div class="stat-value" id="stat-total-users">-</div>
          <div class="stat-label">Total Users</div>
        </div>
        <div class="card stat-card">
          <div class="stat-value" id="stat-premium-users">-</div>
          <div class="stat-label">Premium Users</div>
        </div>
        <div class="card stat-card">
          <div class="stat-value" id="stat-new-users">-</div>
          <div class="stat-label">New Users (7d)</div>
        </div>
        <div class="card stat-card">
          <div class="stat-value" id="stat-total-mixes">-</div>
          <div class="stat-label">Total Mixes</div>
        </div>
      </div>
      
      <div class="card">
        <h3>Recent Activity</h3>
        <p>Coming soon: User activity timeline</p>
      </div>
    </div>
    
    <!-- Users Panel -->
    <div class="admin-panel" id="users">
      <h2>User Management</h2>
      <div class="card">
        <div class="table-container">
          <table id="users-table">
            <thead>
              <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Join Date</th>
                <th>Mixes</th>
                <th>Premium</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <!-- Users will be loaded here via JS -->
              <tr>
                <td colspan="6" class="loading">Loading users...</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Edit User Modal -->
  <div class="modal" id="edit-user-modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3>Edit User</h3>
        <div class="modal-close">&times;</div>
      </div>
      <div class="modal-body">
        <form id="edit-user-form" class="user-form">
          <input type="hidden" id="edit-user-id">
          <div class="form-row">
            <label for="edit-user-name">Name</label>
            <input type="text" id="edit-user-name" required>
          </div>
          <div class="form-row">
            <label for="edit-user-email">Email</label>
            <input type="email" id="edit-user-email" required>
          </div>
          <div class="form-row">
            <label>Account Type</label>
            <div class="checkbox-row">
              <input type="checkbox" id="edit-user-premium">
              <label for="edit-user-premium">Premium User</label>
            </div>
          </div>
          <div class="form-row">
            <label>Permissions</label>
            <div class="checkbox-row">
              <input type="checkbox" id="edit-user-admin">
              <label for="edit-user-admin">Admin Access</label>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button class="secondary-button" id="cancel-edit">Cancel</button>
        <button class="action-button" id="save-user">Save Changes</button>
      </div>
    </div>
  </div>
  
  <!-- Delete User Confirmation Modal -->
  <div class="modal" id="delete-user-modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3>Delete User</h3>
        <div class="modal-close">&times;</div>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this user? This action cannot be undone.</p>
        <p><strong>Name:</strong> <span id="delete-user-name"></span></p>
        <p><strong>Email:</strong> <span id="delete-user-email"></span></p>
        <input type="hidden" id="delete-user-id">
      </div>
      <div class="modal-footer">
        <button class="secondary-button" id="cancel-delete">Cancel</button>
        <button class="action-button" id="confirm-delete">Delete User</button>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Navigation
      const navItems = document.querySelectorAll('.admin-nav-item');
      const panels = document.querySelectorAll('.admin-panel');
      
      navItems.forEach(item => {
        item.addEventListener('click', () => {
          // Remove active class from all
          navItems.forEach(i => i.classList.remove('active'));
          panels.forEach(p => p.classList.remove('active'));
          
          // Add active class to clicked
          item.classList.add('active');
          const panelId = item.getAttribute('data-panel');
          document.getElementById(panelId).classList.add('active');
          
          // Load data based on panel
          if (panelId === 'dashboard') {
            loadStats();
          } else if (panelId === 'users') {
            loadUsers();
          }
        });
      });
      
      // Modal handling
      const modals = document.querySelectorAll('.modal');
      const closeButtons = document.querySelectorAll('.modal-close');
      
      closeButtons.forEach(button => {
        button.addEventListener('click', () => {
          modals.forEach(modal => modal.classList.remove('active'));
        });
      });
      
      // Close modal when clicking outside content
      modals.forEach(modal => {
        modal.addEventListener('click', (e) => {
          if (e.target === modal) {
            modal.classList.remove('active');
          }
        });
      });
      
      // Edit user
      document.getElementById('cancel-edit').addEventListener('click', () => {
        document.getElementById('edit-user-modal').classList.remove('active');
      });
      
      document.getElementById('save-user').addEventListener('click', saveUser);
      
      // Delete user
      document.getElementById('cancel-delete').addEventListener('click', () => {
        document.getElementById('delete-user-modal').classList.remove('active');
      });
      
      document.getElementById('confirm-delete').addEventListener('click', deleteUser);
      
      // Initial data load
      loadStats();
      
      // Load dashboard statistics
      async function loadStats() {
        try {
          const response = await fetch('/api/admin/stats');
          
          if (!response.ok) {
            throw new Error('Failed to load statistics');
          }
          
          const stats = await response.json();
          
          // Update statistics display
          document.getElementById('stat-total-users').textContent = stats.users.total;
          document.getElementById('stat-premium-users').textContent = stats.users.premium;
          document.getElementById('stat-new-users').textContent = stats.users.newLastWeek;
          document.getElementById('stat-total-mixes').textContent = stats.mixes.total;
        } catch (error) {
          console.error('Error loading statistics:', error);
          alert('Failed to load statistics: ' + error.message);
        }
      }
      
      // Load user list
      async function loadUsers() {
        try {
          const usersTable = document.querySelector('#users-table tbody');
          usersTable.innerHTML = '<tr><td colspan="6" class="loading">Loading users...</td></tr>';
          
          const response = await fetch('/api/admin/users');
          
          if (!response.ok) {
            throw new Error('Failed to load users');
          }
          
          const users = await response.json();
          
          // Clear loading message
          usersTable.innerHTML = '';
          
          if (users.length === 0) {
            usersTable.innerHTML = '<tr><td colspan="6">No users found</td></tr>';
            return;
          }
          
          // Add users to table
          users.forEach(user => {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td>${user.name}</td>
              <td>${user.email}</td>
              <td>${new Date(user.dateJoined).toLocaleDateString()}</td>
              <td>${user.mixCount || 0}</td>
              <td>${user.isPremium ? '✅ Premium' : '❌ Free'}</td>
              <td class="user-actions">
                <button class="edit-user" data-id="${user.id}">Edit</button>
                <button class="delete-user" data-id="${user.id}">Delete</button>
              </td>
            `;
            
            usersTable.appendChild(row);
          });
          
          // Add event listeners to edit and delete buttons
          document.querySelectorAll('.edit-user').forEach(button => {
            button.addEventListener('click', () => editUser(button.getAttribute('data-id')));
          });
          
          document.querySelectorAll('.delete-user').forEach(button => {
            button.addEventListener('click', () => confirmDeleteUser(button.getAttribute('data-id')));
          });
        } catch (error) {
          console.error('Error loading users:', error);
          const usersTable = document.querySelector('#users-table tbody');
          usersTable.innerHTML = `<tr><td colspan="6">Error loading users: ${error.message}</td></tr>`;
        }
      }
      
      // Edit user function
      async function editUser(userId) {
        try {
          const response = await fetch(`/api/admin/users/${userId}`);
          
          if (!response.ok) {
            throw new Error('Failed to load user details');
          }
          
          const user = await response.json();
          
          // Fill form with user data
          document.getElementById('edit-user-id').value = user.id;
          document.getElementById('edit-user-name').value = user.name;
          document.getElementById('edit-user-email').value = user.email;
          document.getElementById('edit-user-premium').checked = user.isPremium;
          document.getElementById('edit-user-admin').checked = user.isAdmin;
          
          // Show modal
          document.getElementById('edit-user-modal').classList.add('active');
        } catch (error) {
          console.error('Error loading user details:', error);
          alert('Failed to load user details: ' + error.message);
        }
      }
      
      // Save user changes
      async function saveUser() {
        try {
          const userId = document.getElementById('edit-user-id').value;
          
          const userData = {
            name: document.getElementById('edit-user-name').value,
            email: document.getElementById('edit-user-email').value,
            isPremium: document.getElementById('edit-user-premium').checked,
            isAdmin: document.getElementById('edit-user-admin').checked
          };
          
          const response = await fetch(`/api/admin/users/${userId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(userData)
          });
          
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Failed to update user');
          }
          
          // Close modal and reload user list
          document.getElementById('edit-user-modal').classList.remove('active');
          loadUsers();
        } catch (error) {
          console.error('Error saving user:', error);
          alert('Failed to save user: ' + error.message);
        }
      }
      
      // Confirm delete user
      async function confirmDeleteUser(userId) {
        try {
          const response = await fetch(`/api/admin/users/${userId}`);
          
          if (!response.ok) {
            throw new Error('Failed to load user details');
          }
          
          const user = await response.json();
          
          // Fill confirmation dialog
          document.getElementById('delete-user-id').value = user.id;
          document.getElementById('delete-user-name').textContent = user.name;
          document.getElementById('delete-user-email').textContent = user.email;
          
          // Show modal
          document.getElementById('delete-user-modal').classList.add('active');
        } catch (error) {
          console.error('Error loading user details:', error);
          alert('Failed to load user details: ' + error.message);
        }
      }
      
      // Delete user
      async function deleteUser() {
        try {
          const userId = document.getElementById('delete-user-id').value;
          
          const response = await fetch(`/api/admin/users/${userId}`, {
            method: 'DELETE'
          });
          
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Failed to delete user');
          }
          
          // Close modal and reload user list
          document.getElementById('delete-user-modal').classList.remove('active');
          loadUsers();
          
          // Also refresh stats since we've changed the user count
          loadStats();
        } catch (error) {
          console.error('Error deleting user:', error);
          alert('Failed to delete user: ' + error.message);
        }
      }
    });
  </script>
</body>
</html>